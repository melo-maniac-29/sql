create a library database with the schemas 
book(book_id,title,no_of_copies)
student(student_id,name,address,age)
bookissued(issue_id,student_id,book_id,issue_date)
bookreturn(issue_id,return_date,fine)
create a procedure for book issue,return of books ,trigger to update number of copies on book issue and book return 
calculate fine if the book is returned after 15 days of issue date




CREATE TABLE book (
    book_id NUMBER PRIMARY KEY,
    title VARCHAR2(255) NOT NULL,
    no_of_copies NUMBER NOT NULL
);

CREATE TABLE student (
    student_id NUMBER PRIMARY KEY,
    name VARCHAR2(255) NOT NULL,
    address VARCHAR2(255) NOT NULL,
    age NUMBER NOT NULL
);

CREATE TABLE bookissued (
    issue_id NUMBER PRIMARY KEY,
    student_id NUMBER,
    book_id NUMBER,
    issue_date DATE,
    FOREIGN KEY (student_id) REFERENCES student(student_id),
    FOREIGN KEY (book_id) REFERENCES book(book_id)
);

CREATE TABLE bookreturn (
    issue_id NUMBER,
    return_date DATE,
    fine NUMBER(10, 2),
    FOREIGN KEY (issue_id) REFERENCES bookissued(issue_id)
);


INSERT INTO book (book_id, title, no_of_copies) VALUES (1, 'The Great Gatsby', 5);
INSERT INTO book (book_id, title, no_of_copies) VALUES (2, '1984', 3);
INSERT INTO book (book_id, title, no_of_copies) VALUES (3, 'To Kill a Mockingbird', 4);
INSERT INTO book (book_id, title, no_of_copies) VALUES (4, 'Pride and Prejudice', 2);
INSERT INTO book (book_id, title, no_of_copies) VALUES (5, 'Moby Dick', 1);



INSERT INTO student (student_id, name, address, age) VALUES (1, 'John Doe', '123 Main St', 20);
INSERT INTO student (student_id, name, address, age) VALUES (2, 'Jane Smith', '456 Elm St', 22);
INSERT INTO student (student_id, name, address, age) VALUES (3, 'Alice Johnson', '789 Maple Ave', 19);
INSERT INTO student (student_id, name, address, age) VALUES (4, 'Bob Brown', '321 Oak St', 21);
INSERT INTO student (student_id, name, address, age) VALUES (5, 'Carol White', '654 Pine St', 23);


INSERT INTO bookissued (issue_id, student_id, book_id, issue_date) VALUES (1, 1, 1, SYSDATE);
INSERT INTO bookissued (issue_id, student_id, book_id, issue_date) VALUES (2, 2, 2, SYSDATE); 
INSERT INTO bookissued (issue_id, student_id, book_id, issue_date) VALUES (3, 3, 3, SYSDATE); 


INSERT INTO bookreturn (issue_id, return_date, fine) VALUES (1, SYSDATE, 0.00); 
INSERT INTO bookreturn (issue_id, return_date, fine) VALUES (2, SYSDATE, 0.00); 


CREATE OR REPLACE PROCEDURE IssueBook(p_student_id IN NUMBER, p_book_id IN NUMBER) AS
    availableCopies NUMBER;
BEGIN
    SELECT no_of_copies INTO availableCopies FROM book WHERE book_id = p_book_id;

    IF availableCopies > 0 THEN
        INSERT INTO bookissued (issue_id, student_id, book_id, issue_date)
        VALUES (bookissued_seq.NEXTVAL, p_student_id, p_book_id, SYSDATE);

        UPDATE book SET no_of_copies = no_of_copies - 1 WHERE book_id = p_book_id;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'No copies available to issue');
    END IF;
END;
/


CREATE OR REPLACE PROCEDURE ReturnBook(p_issue_id IN NUMBER) AS
    issueDate DATE;
    returnDate DATE := SYSDATE;
    fineAmount NUMBER := 0;
BEGIN
    SELECT issue_date INTO issueDate FROM bookissued WHERE issue_id = p_issue_id;

    IF (returnDate - issueDate) > 15 THEN
        fineAmount := (returnDate - issueDate - 15) * 1.00; -- $1 per day late
    END IF;

    INSERT INTO bookreturn (issue_id, return_date, fine)
    VALUES (p_issue_id, returnDate, fineAmount);

    -- Update number of copies in book table
    UPDATE book SET no_of_copies = no_of_copies + 1 
    WHERE book_id = (SELECT book_id FROM bookissued WHERE issue_id = p_issue_id);
END;
/



CREATE OR REPLACE TRIGGER after_book_issue
AFTER INSERT ON bookissued
FOR EACH ROW
BEGIN
    UPDATE book SET no_of_copies = no_of_copies - 1 WHERE book_id = :NEW.book_id;
END;
/

CREATE OR REPLACE TRIGGER after_book_return
AFTER INSERT ON bookreturn
FOR EACH ROW
BEGIN
    UPDATE book SET no_of_copies = no_of_copies + 1 
    WHERE book_id = (SELECT book_id FROM bookissued WHERE issue_id = :NEW.issue_id);
END;
/


SELECT * FROM book;

BOOK_ID	TITLE	NO_OF_COPIES
1	The Great Gatsby	5
2	1984	3
3	To Kill a Mockingbird	4
4	Pride and Prejudice	2
5	Moby Dick	1
5 rows returned in 0.00 seconds	        	Download
			

SELECT * FROM student;

STUDENT_ID	NAME	ADDRESS	AGE
1	John Doe	123 Main St	20
2	Jane Smith	456 Elm St	22
3	Alice Johnson	789 Maple Ave	19
4	Bob Brown	321 Oak St	21
5	Carol White	654 Pine St	23
5 rows returned in 0.00 seconds	        	Download
			

SELECT * FROM bookissued;

ISSUE_ID	STUDENT_ID	BOOK_ID	ISSUE_DATE
1	1	1	10/16/2024
2	2	2	10/16/2024
3	3	3	10/16/2024
3 rows returned in 0.01 seconds	        	Download


SELECT * FROM bookreturn;

ISSUE_ID	RETURN_DATE	FINE
1	10/16/2024	0
2	10/16/2024	0
2	10/16/2024	0
3 rows returned in 0.00 seconds	        	Download


CREATE SEQUENCE bookissued_seq START WITH 1 INCREMENT BY 1;

SELECT MAX(issue_id) FROM bookissued;

INSERT INTO bookissued values (11, 2, 2, SYSDATE);






BEGIN
    ReturnBook(11);
END;
/


